# -*- coding: utf-8 -*-
"""IndustryImpactEngine_V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SiK1lzw_v9ATKEun70BboSTPwxGAQs8s

# 🛠️ Environment Setup & NLP
"""

# ========================
# 🟢 1) Install dependencies
# ========================
!pip install --upgrade gspread gspread-dataframe

"""# 🔐 Google Auth + Drive Mounting"""

from google.colab import auth
auth.authenticate_user()

from google.colab import drive
drive.mount('/content/drive')

"""# 🔗 Google Sheets Connection"""

import gspread
import pandas as pd
from gspread_dataframe import get_as_dataframe
from google.auth import default

creds, _ = default()
gc = gspread.authorize(creds)

spreadsheet_url = 'https://docs.google.com/spreadsheets/d/1WyDkJ1CN8sdTDWDhBzMIYSeCEPkruq5rYZIJfcHYjt0'

spreadsheet = gc.open_by_url(spreadsheet_url)

"""# 📂 Load Impact Mapping Table"""

impact_ws = spreadsheet.worksheet('ImpactMapping_v1')  # Connects to your mapping tab
impact_mapping_df = get_as_dataframe(impact_ws, evaluate_formulas=True, header=0)
impact_mapping_df.dropna(how='all', inplace=True)

print("✅ Impact Mapping Table Loaded:")
display(impact_mapping_df.head())

"""# 📰 Load Signals from Signal Tracker V2


"""

signal_ws = spreadsheet.worksheet('SignalFeed_v2')  # Connects to your signal tab
signal_df = get_as_dataframe(signal_ws, evaluate_formulas=True, header=0)
signal_df.dropna(how='all', inplace=True)

print("✅ Signal Feed Loaded:")
display(signal_df.head())

"""# 🧠 Map Signals → Sectors, Tickers, Impacts"""

output_df = signal_df.copy()
low_confidence_log = []

output_df['MappedPrimarySectors'] = ''
output_df['MappedExampleTickers'] = ''
output_df['MappedExpectedImpact'] = ''
output_df['MappingFound'] = False

for idx, row in output_df.iterrows():
    event_type = str(row.get('classified_event', '')).strip().lower()
    region = str(row.get('region', '')).strip()
    region_confidence = float(row.get('region_confidence', 0.0))
    region_precision = str(row.get('region_precision_flag', '')).lower() == "true"

    # Skip low-confidence signals but log them
    if region_confidence < 0.5:
        low_confidence_log.append({
            "timestamp": row.get('timestamp'),
            "classified_event": row.get('classified_event'),
            "region": region,
            "region_confidence": region_confidence
        })
        continue

    # Split region into individual countries
    countries = [c.strip() for c in region.split(",") if c.strip()]

    mapping_found = False

    for country in countries:
        # Loop through mapping rows for each country-event combo
        for _, map_row in impact_mapping_df.iterrows():
            primary_event = str(map_row['EventType']).strip().lower()
            synonyms = str(map_row.get('Synonyms', '')).lower().split(',')
            synonyms = [s.strip() for s in synonyms if s.strip()]
            possible_events = [primary_event] + synonyms

            if event_type in possible_events:
                mapped_sectors = f"{map_row['PrimarySectors']} (Country: {country})"

                output_df.at[idx, 'MappedPrimarySectors'] = mapped_sectors
                output_df.at[idx, 'MappedExampleTickers'] = map_row['ExampleTickers']
                output_df.at[idx, 'MappedExpectedImpact'] = map_row['ExpectedImpact']
                output_df.at[idx, 'MappingFound'] = True
                mapping_found = True
                break

        if mapping_found:
            break

    if not mapping_found:
        output_df.at[idx, 'MappedPrimarySectors'] = 'No mapping found'
        output_df.at[idx, 'MappedExampleTickers'] = 'No mapping found'
        output_df.at[idx, 'MappedExpectedImpact'] = 'No mapping found'

print("✅ Event-to-Impact Mapping with region splitting and confidence filtering complete:")
display(output_df.head())

# Display low-confidence log (if any)
if low_confidence_log:
    low_conf_df = pd.DataFrame(low_confidence_log)
    print("⚠️ Low-confidence signals logged:")
    display(low_conf_df)
else:
    print("✅ No low-confidence signals detected.")

"""# 📤 Output to Sheet (ImpactResults_v1)"""

from gspread_dataframe import set_with_dataframe
try:
    impact_results_ws = spreadsheet.worksheet('ImpactResults_v1')
    spreadsheet.del_worksheet(impact_results_ws)
except gspread.exceptions.WorksheetNotFound:
    pass

impact_results_ws = spreadsheet.add_worksheet(title='ImpactResults_v1', rows=1000, cols=30)
set_with_dataframe(impact_results_ws, output_df)

print("✅ Mapped results written to 'ImpactResults_v1' tab in your Google Sheet.")